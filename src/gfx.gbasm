include "hardware.inc"
include "interrupts.inc"

section "graphics", rom0

    ; routine that waits until vblank happens to proceed
    ; meant to be called every frame
    gfx_wait_for_vblank::
    .wait:
        halt                            ; suspending CPU until next interrupt
        check_last_interrupt IEB_VBLANK ; verifying whether interrupt was caused by VBLANK
        jr nz, .wait                    ; if it wasn't, wait
        ret

    ; routine that copies the sprite attribute table from RAM to VRAM
    ; this is meant to get called every frame (ideally, call it from vblank interrupt handler)
    ; then if we want to change sprite attributes, we should write to the oam_data table in RAM
    gfx_oam_dma::
        ld a, HIGH(oam_data)          ; loading high byte of the oam table address in ram
        ldh [rDMA], a                 ; starting DMA transfer
        ld a, 40                      ; waiting until transfer finishes (160 cycles)
    .wait:
        dec a                         ; 1 cycle
        jr nz, .wait                  ; 3 cycles
        ret

    ; routine that copies data from rom/ram to vram
    ; WARNING: only use during vblank
    ; input:
    ;   hl: src address
    ;   de: dst address
    ;   b: num of tiles to copy, from $00 to $7F (WARNING: do NOT set higher bit)
    gfx_hdma::
        ld a, h
        ld [rHDMA1], a ; load upper byte of src
        ld a, l
        ld [rHDMA2], a ; load lower byte of src
        ld a, d
        ld [rHDMA3], a ; load upper byte of dst
        ld a, e
        ld [rHDMA4], a ; load lower byte of dst
        ld a, b
        ld [rHDMA5], a ; start dma
        ret

    ; routine that changes a background palette
    ; input:
    ;   a: palette number
    ;   hl: color start address
    gfx_write_bgp::
        sla a           ; multiply a by 8
        sla a
        sla a
        set 7, a        ; set auto increment
        ld [rBCPS], a   ; write palette start index
        ld b, 4         ; set iteration count to 4
    .loop:
        ld a, [hli]     ; load lower byte of palette
        ld [rBCPD], a   ; write lower byte of palette
        ld a, [hli]     ; load upper byte of palette
        ld [rBCPD], a   ; write upper byte of palette
        dec b
        jr nz, .loop
        ret

    ; routine that changes an object palette
    ; input:
    ;   a: palette number
    ;   hl: color start address
    gfx_write_obp::
        sla a           ; multiply a by 8
        sla a
        sla a
        set 7, a        ; set auto increment
        ld [rOCPS], a   ; write palette start index
        ld b, 4         ; set iteration count to 4
    .loop:
        ld a, [hli]     ; load lower byte of palette
        ld [rOCPD], a   ; write lower byte of palette
        ld a, [hli]     ; load upper byte of palette
        ld [rOCPD], a   ; write upper byte of palette
        dec b
        jr nz, .loop
        ret

    ; writes all 8 background palettes
    ; input:
    ;   hl: palette group start address
    gfx_write_bgp_all::
        ld a, $80       ; start at palette 0 with auto increment
        ld [rBCPS], a   ; write palette start index
        ld b, 64        ; set iteration count to 64
    .loop:
        ld a, [hli]     ; load byte of palette
        ld [rBCPD], a   ; write byte of palette
        dec b
        jr nz, .loop
        ret
    
    ; wipes the OAM data with zeroes
    gfx_clear_obj::
        ld a, 0                     ; load a with 0
        ld b, $FF                   ; load b with $FF iterations
        ld hl, startof("oam_data")    ; load hl with oam data starting address
    .loop:
        ld [hli], a
        dec b
        jr nz, .loop
        ret

section "oam_data", wram0, align[8]
    oam_data:: ds $FF
